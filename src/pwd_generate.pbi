;-------------------------------------------------;  *;  * PASSWORD GENERATOR;  *;  * pwd_generate.pbi;  *;-------------------------------------------------;- constants#SPECIAL_CHARS = 29Enumeration 0  #BEGIN_WITH_RANDOM  #BEGIN_WITH_UPPER_CASE  #BEGIN_WITH_LOWER_CASE  #BEGIN_WITH_NUMBER  #BEGIN_WITH_SPECIAL_CHAREndEnumeration;--------------------------------------------------------------------------------Procedure.s gen_pwd( Length.l , UpperCase.l = 0 , LowerCase.l = 0 , Numbers.l = 0 , SpecialSigns.l = 0 , BeginWith.l = #BEGIN_WITH_RANDOM , OnlyValidSpecials = #True , FormatWithHyphen = #True)    ;-- check for valid params  If Length < 0    warn("Password length was negative.")    ProcedureReturn #Null$  ElseIf Length > 128    warn("Password length was too big (>128).")    ProcedureReturn #Null$  EndIf    If UpperCase < -1 Or LowerCase < -1 Or Numbers < -1 Or SpecialSigns < -1    warn("The parameter of one of the chars was negative.")    ProcedureReturn #Null$  EndIf    ;-- declare vars  Protected.b no_uchar, no_lchar, no_num, no_special  Protected.l i, j, nb_of_specials, calc_len, hyphen_1, hyphen_2  Protected   new_pwd$    ;-- check environment  If UpperCase = -1    : no_uchar   = #True : EndIf  If LowerCase = -1    : no_lchar   = #True : EndIf  If Numbers = -1      : no_num     = #True : EndIf  If SpecialSigns = -1 : no_special = #True : EndIf    If OnlyValidSpecials : nb_of_specials = 6 : Else : nb_of_specials = #SPECIAL_CHARS : EndIf    ;-- get special chars  Dim sc.s(nb_of_specials-1)  Restore SPECIAL_CHARS  For i = 0 To nb_of_specials-1 : Read.s sc(i) : Next    ;-- recalc password content  If no_uchar = #False   : calc_len + UpperCase    : EndIf  If no_lchar = #False   : calc_len + LowerCase    : EndIf  If no_num = #False     : calc_len + Numbers      : EndIf  If no_special = #False : calc_len + SpecialSigns : EndIf    ;- find positions for the hyphen  If FormatWithHyphen    hyphen_1 = Int(Length / 3)    hyphen_2 = Length - hyphen_1 + 1    calc_len + 2  EndIf    While calc_len < Length        i = Random(#BEGIN_WITH_SPECIAL_CHAR, #BEGIN_WITH_UPPER_CASE)        If i = #BEGIN_WITH_UPPER_CASE And no_uchar = #False      UpperCase + 1      calc_len + 1    ElseIf i = #BEGIN_WITH_LOWER_CASE And no_lchar = #False      LowerCase + 1      calc_len + 1    ElseIf i = #BEGIN_WITH_NUMBER And no_num = #False      Numbers + 1      calc_len + 1    ElseIf i = #BEGIN_WITH_SPECIAL_CHAR And no_special = #False      SpecialSigns + 1      calc_len + 1    EndIf      Wend    ;-- check type of passwords first char  If BeginWith = #BEGIN_WITH_RANDOM        While #True            i = Random(#BEGIN_WITH_SPECIAL_CHAR, #BEGIN_WITH_UPPER_CASE)            If i = #BEGIN_WITH_UPPER_CASE And no_uchar = #False        BeginWith = #BEGIN_WITH_UPPER_CASE : Break      ElseIf i = #BEGIN_WITH_LOWER_CASE And no_lchar = #False        BeginWith = #BEGIN_WITH_LOWER_CASE : Break      ElseIf i = #BEGIN_WITH_NUMBER And no_num = #False        BeginWith = #BEGIN_WITH_NUMBER : Break      ElseIf i = #BEGIN_WITH_SPECIAL_CHAR And no_special = #False        BeginWith = #BEGIN_WITH_SPECIAL_CHAR : Break      EndIf          Wend      EndIf    ;-- set first char  Select BeginWith    Case #BEGIN_WITH_UPPER_CASE   : new_pwd$ = Chr(Random(90, 65))             : UpperCase - 1    Case #BEGIN_WITH_LOWER_CASE   : new_pwd$ = Chr(Random(122, 97))            : LowerCase - 1    Case #BEGIN_WITH_NUMBER       : new_pwd$ = Str(Random(9))                  : Numbers - 1    Case #BEGIN_WITH_SPECIAL_CHAR : new_pwd$ = sc( Random(nb_of_specials-1) )  : SpecialSigns - 1    Default      info("Unknown param in {BeginWith}.")      ProcedureReturn #Null$  EndSelect    ;-- set each char until it reaches the password length  j = 2  While Len(new_pwd$) < Length        If FormatWithHyphen      If j = hyphen_1 Or j = hyphen_2        new_pwd$ + "-"        j + 1        Continue      EndIf    EndIf        i = Random(#BEGIN_WITH_SPECIAL_CHAR, #BEGIN_WITH_UPPER_CASE)        If i = #BEGIN_WITH_UPPER_CASE And no_uchar = #False And UpperCase > 0      new_pwd$ + Chr(Random(90, 65))      UpperCase - 1      j + 1    ElseIf i = #BEGIN_WITH_LOWER_CASE And no_lchar = #False And LowerCase > 0      new_pwd$ + Chr(Random(122, 97))      LowerCase - 1      j + 1    ElseIf i = #BEGIN_WITH_NUMBER And no_num = #False And Numbers > 0      new_pwd$ + Str(Random(9))      Numbers - 1      j + 1    ElseIf i = #BEGIN_WITH_SPECIAL_CHAR And no_special = #False And SpecialSigns > 0      new_pwd$ + sc( Random(nb_of_specials-1) )      SpecialSigns - 1      j + 1    EndIf      Wend    ;-- free the array for the special signs  FreeArray(sc())    ProcedureReturn new_pwd$  EndProcedure;--------------------------------------------------------------------------------Procedure.i gen_pwd_image( password$ = #Null$ , defaultColor.l = 0 )    Protected.l part1_len, part2_len, img_width, img_height, txt_width, txt_height, font_size = 30  Protected.i img_h, font_h  Protected   pwd_part1$, pwd_part2$    part1_len = Round(Len(password$), #PB_Round_Up)  part2_len = Round(Len(password$), #PB_Round_Down)    img_width  = GadgetWidth(#IMG_PASSWORD)  img_height = GadgetHeight(#IMG_PASSWORD)    img_h = CreateImage(#PB_Any, img_width, img_height, 24, 0)  If IsImage(img_h)        font_h = LoadFont(#PB_Any, "Courier New", font_size, #PB_Font_HighQuality)        StartDrawing(ImageOutput(img_h))    DrawingFont(FontID(font_h))    Box(0, 0, img_width, img_height, defaultColor)    txt_width  = TextWidth(password$)    StopDrawing()        While txt_width > img_width      FreeFont(font_h)      font_size - 2      font_h = LoadFont(#PB_Any, "Courier New", font_size, #PB_Font_HighQuality)      StartDrawing(ImageOutput(img_h))      DrawingFont(FontID(font_h))      txt_width = TextWidth(password$)      StopDrawing()    Wend        StartDrawing(ImageOutput(img_h))    DrawingMode(#PB_2DDrawing_Transparent)    DrawingFont(FontID(font_h))    txt_height = TextHeight(password$)    DrawText((img_width-txt_width)/2, (img_height-txt_height)/2, password$, RGB(192, 192, 0))    StopDrawing()        FreeFont(font_h)      Else    warn("Can't create image.")    ProcedureReturn 0  EndIf    ProcedureReturn img_h  EndProcedure;--------------------------------------------------------------------------------;- dataDataSection  SPECIAL_CHARS:  Data.s "-","_","+","*","=","!","§","$","%","&","/","(",")","?","\","[","]","{","}",",",".",";",":","<",">","|","#","'","~"EndDataSection;--------------------------------------------------------------------------------; IDE Options = PureBasic 5.73 LTS (Windows - x64); CursorPosition = 122; FirstLine = 107; Folding = -; EnableXP; UseMainFile = main.pb; EnablePurifier; EnableCompileCount = 0; EnableBuildCount = 0; EnableExeConstant
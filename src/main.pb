;-------------------------------------------------;  *;  * Password Generator;  *;  * Copyright 2019-2021 by Markus Mueller <markus.mueller.73@hotmail.de>;  *;  * This program is free software; you can redistribute it and/or modify;  * it under the terms of the GNU General Public License As published by;  * the Free Software Foundation; either version 2 of the License, or;  * (at your option) any later version.;  *;  * This program is distributed in the hope that it will be useful,;  * but WITHOUT ANY WARRANTY; without even the implied warranty of;  * MERCHANTABILITY or FITNESS for A PARTICULAR PURPOSE.  See the;  * GNU General Public License for more details.;  *;  * You should have received a copy of the GNU General Public License;  * along with this program; if not, write to the Free Software;  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,;  * MA 02110-1301, USA.;  *;-------------------------------------------------EnableExplicit;-------------------------------------------------;- application constants#APP_NAME          = "pwgen"#APP_TITLE         = "Password Generator"#APP_MAJOR         = 0#APP_MINOR         = 2#APP_MICRO         = #PB_Editor_BuildCount#APP_VERSION       = " " + #APP_MAJOR + "." + #APP_MINOR + "." + #APP_MICRO#APP_LOG_FILE      = #APP_NAME + ".log"#APP_CONFIG_FILE   = #APP_NAME + ".conf"#APP_PASSWORD_FILE = #APP_NAME + "_passwords.txt";-------------------------------------------------;- help functions and macrosProcedure to_log ( message.s , function_name.s = #Null$ , log_type.b = 0 )  Protected type$, msg$  Select log_type    Case 1 : type$ = "WARNING" + Space(1)    Case 2 : type$ = "ERROR" + Space(1)  EndSelect  msg$ = FormatDate("[%yy-%mm-%dd %hh:%ii:%ss]", Date()) + Space(1) + type$ + "->" + Space(1)  If function_name = #Null$    msg$ + message  Else    msg$ + "<" + function_name + ">" + Space(1) + message  EndIf  Debug msg$EndProcedureMacro info( msg ) : to_log(msg, #PB_Compiler_Procedure, 0) : EndMacroMacro warn( msg ) : to_log(msg, #PB_Compiler_Procedure, 1) : EndMacroMacro void : : EndMacroMacro _gen_pwd_params  _get_spin_value(#SPN_LENGTH), GetGadgetState(#CHK_UPPER_CHARS)-1, GetGadgetState(#CHK_LOWER_CHARS)-1, GetGadgetState(#CHK_NUMBERS)-1, GetGadgetState(#CHK_SPECIAL_SIGNS)-1, #BEGIN_WITH_RANDOM, GetGadgetState(#CHK_SIMPLE_SPECIAL_SIGNS)EndMacro;-------------------------------------------------;- includesXIncludeFile "main_window.pbi"XIncludeFile "pwd_generate.pbi";-------------------------------------------------;- mainDeclare.l main ( void )Define RESULT.b = main()End RESULT;-------------------------------------------------;- functionsProcedure.l main ( void )    Protected.b quit  Protected.l default_color  Protected.i password_image  Protected   password$    If main_window_open()    default_color = GetWindowColor(#WND_MAIN)    password$ = gen_pwd(_gen_pwd_params)    password_image = gen_pwd_image(password$, default_color)    SetGadgetState(#IMG_PASSWORD, ImageID(password_image))  Else    MessageRequester("ERROR", "Critical error, can't open an os window.", #PB_MessageRequester_Error)    End 1  EndIf    Repeat        Select WaitWindowEvent()              Case #PB_Event_ActivateWindow        ;      Case #PB_Event_CloseWindow        quit = 1      Case #PB_Event_DeactivateWindow        ;      Case #PB_Event_Gadget                Select EventGadget()                      Case #IMG_PASSWORD            If password$ <> #Null$              ClearClipboard()              SetClipboardText(password$)            EndIf                      Case #BTN_GENERATE            password$ = gen_pwd(_gen_pwd_params)            password_image = gen_pwd_image(password$, default_color)            SetGadgetState(#IMG_PASSWORD, ImageID(password_image))                      Case #CHK_SPECIAL_SIGNS            If GetGadgetState(#CHK_SPECIAL_SIGNS)              DisableGadget(#CHK_SIMPLE_SPECIAL_SIGNS, #False)            Else              DisableGadget(#CHK_SIMPLE_SPECIAL_SIGNS, #True)            EndIf                      Default            ;        EndSelect              Case #PB_Event_MaximizeWindow        ;      Case #PB_Event_Menu                Select EventMenu()          Case #FILE_PREFS            ;          Case #FILE_QUIT            quit = 1          Case #HELP_ABOUT            ;          Default            ;        EndSelect              Case #PB_Event_MinimizeWindow        ;      Case #PB_Event_MoveWindow        ;      Case #PB_Event_Repaint        ;      Case #PB_Event_RestoreWindow        ;      Case #PB_Event_SizeWindow        ;      Case #PB_Event_Timer        ;      Default        ;    EndSelect      Until quit = 1    ProcedureReturn 0  EndProcedure; IDE Options = PureBasic 6.04 LTS (Windows - x64); CursorPosition = 68; FirstLine = 39; Folding = --; Optimizer; EnableXP; EnablePurifier; EnableCompileCount = 27; EnableBuildCount = 0; EnableExeConstant